{
  "uid" : "a92e299d433e4ee0",
  "name" : "用例标题 = 传正确的参数",
  "fullName" : "test_case.test_req#test_select",
  "historyId" : "f278b726ed954655afdfb8adb01f4eb7",
  "time" : {
    "start" : 1657101088753,
    "stop" : 1657101088910,
    "duration" : 157
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '200' == '204'\n  - 204\n  + 200",
  "statusTrace" : "url_method = {'method': 'post', 'url': '/cgsfront/appointment/getHandlingRecord'}\ndata = {'data': {'cgs_token': 'fbf66c79988e43608bccc68088d7d0e4', 'pageIndex': '1'}, 'detail': '传正确的参数', 'resp': {'code': '200', 'message': '操作成功'}}\n\n    @allure.story(\"车管所查询\")\n    @allure.title(\"用例标题 = {data[detail]}\")\n    @pytest.mark.parametrize('url_method', yml_url)\n    @pytest.mark.parametrize('data', uml_data)\n    def test_select(url_method, data):\n        logging.info(\"*************** 开始执行用例 ({0}) ***************\".format(data['detail']))\n        url = host + url_method['url']\n        re = reqs.sendRequests(url_method['method'], url, data['data'])\n        result = re.json()\n        logging.info(\"code ==>> 期望结果：{}， 实际结果：{}\".format(data['resp']['code'], result['code']))\n>       assert data['resp']['code'] == result['code']\nE       AssertionError: assert '200' == '204'\nE         - 204\nE         + 200\n\ntest_case\\test_req.py:26: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '200' == '204'\n  - 204\n  + 200",
    "statusTrace" : "url_method = {'method': 'post', 'url': '/cgsfront/appointment/getHandlingRecord'}\ndata = {'data': {'cgs_token': 'fbf66c79988e43608bccc68088d7d0e4', 'pageIndex': '1'}, 'detail': '传正确的参数', 'resp': {'code': '200', 'message': '操作成功'}}\n\n    @allure.story(\"车管所查询\")\n    @allure.title(\"用例标题 = {data[detail]}\")\n    @pytest.mark.parametrize('url_method', yml_url)\n    @pytest.mark.parametrize('data', uml_data)\n    def test_select(url_method, data):\n        logging.info(\"*************** 开始执行用例 ({0}) ***************\".format(data['detail']))\n        url = host + url_method['url']\n        re = reqs.sendRequests(url_method['method'], url, data['data'])\n        result = re.json()\n        logging.info(\"code ==>> 期望结果：{}， 实际结果：{}\".format(data['resp']['code'], result['code']))\n>       assert data['resp']['code'] == result['code']\nE       AssertionError: assert '200' == '204'\nE         - 204\nE         + 200\n\ntest_case\\test_req.py:26: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bcbba2b38673e646",
      "name" : "log",
      "source" : "bcbba2b38673e646.txt",
      "type" : "text/plain",
      "size" : 715
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "车管所查询"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_req"
  }, {
    "name" : "host",
    "value" : "DESKTOP-9BAFSPC"
  }, {
    "name" : "thread",
    "value" : "6828-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_req"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'detail': '传正确的参数', 'data': {'cgs_token': 'fbf66c79988e43608bccc68088d7d0e4', 'pageIndex': '1'}, 'resp': {'code': '200', 'message': '操作成功'}}"
  }, {
    "name" : "url_method",
    "value" : "{'url': '/cgsfront/appointment/getHandlingRecord', 'method': 'post'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "a92e299d433e4ee0.json",
  "parameterValues" : [ "{'detail': '传正确的参数', 'data': {'cgs_token': 'fbf66c79988e43608bccc68088d7d0e4', 'pageIndex': '1'}, 'resp': {'code': '200', 'message': '操作成功'}}", "{'url': '/cgsfront/appointment/getHandlingRecord', 'method': 'post'}" ]
}